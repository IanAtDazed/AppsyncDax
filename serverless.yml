service:
  name: appsyncDax

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  timeout: 300
  # vpc:
  #   securityGroupIds:
  #     - Fn::GetAtt: [DatabaseVpcSecurityGroup, GroupId]
  #   subnetIds:
  #     - Ref: PrivateSubnet1
  #     - Ref: PrivateSubnet2
  environment:
    POSTS_TABLE_NAME: { $self:custom.postsTable }
  role: { Fn::GetAtt: [DaxIamRole, Arn] }
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dax:*"
      Resource: { Fn::GetAtt: [DaxCluster, Arn] }

plugins:
  - serverless-appsync-plugin
  - serverless-pseudo-parameters

custom:
  poolName: ${self:provider.stage}SimpleCMS
  dbName: "simpleCMS"
  daxIamRole: "${self:service.name}DaxIamRole"
  postsTable: ${self:provider.stage}Posts
  appSync:
    region: ${self:provider.region}
    name: ${self:service.name}-${self:provider.stage}
    authenticationType: AWS_IAM
    serviceRole: "${self:service.name}-AppSyncServiceRole"
    userPoolConfig:
      awsRegion: "${self:provider.region}"
      userPoolId: ${self:custom.userPool.${self:provider.stage}}
      defaultAction: ALLOW
    mappingTemplates:
      - type: Query
        dataSource: LambdaSource
        field: getPostsFromCache
        request: "Query-getPostsFromCache-request.vtl"
        response: "Query-getPostsFromCache-response.vtl"
      - type: Mutation
        dataSource: LambdaSource
        field: addPostToDAX
        request: Mutation-addPost-request.vtl
        response: common-response.vtl
      - dataSource: Posts
        type: Query
        field: getPostsFromDB
        request: "Query-getPostsFromDB-request.vtl"
        response: "Query-getPostsFromDB-response.vtl"
      - dataSource: Posts
        type: Mutation
        field: addPostToDB
        request: "Mutation-addPostToDB-request.vtl"
        response: "common-response.vtl"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Posts
        description: "Posts table"
        config:
          tableName: ${self:custom.postsTable}
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: LambdaSource
        description: "Lambda DataSource"
        config:
          functionName: graphql
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
functions:
  graphql:
    handler: handler.graphqlHandler
resources:
  # appSync data source role
  - ${file(resources/appsync.yml)}
    # rds
  - ${file(resources/dax.yml)}
    # Cognito
  - ${file(resources/dynamodb.yml)}
    # Cognito
  - ${file(resources/cognito.yml)}
